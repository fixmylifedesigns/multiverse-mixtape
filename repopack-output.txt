This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-19T09:18:34.838Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.eslintrc.json
.gitignore
jsconfig.json
LICENSE
next.config.mjs
package.json
postcss.config.mjs
README.md
src/app/_document.js
src/app/api/songs/[id]/route.js
src/app/api/songs/route.js
src/app/globals.css
src/app/layout.js
src/app/multiversemixtape/page.js
src/app/page.js
src/app/page.module.css
src/components/AddSongModal.js
src/components/EditModal.js
src/components/SongCard.js
src/components/SongList.js
src/data/songs.json
src/styles/Modal.module.css
src/styles/SongCard.module.css
src/styles/SongList.module.css
src/utils/fileOperations.js
tailwind.config.js

================================================================
Repository Files
================================================================

================
File: .eslintrc.json
================
{
  "extends": "next/core-web-vitals"
}

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

================
File: jsconfig.json
================
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}

================
File: LICENSE
================
MIT License

Copyright (c) 2024 Irving Jose Duran

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: next.config.mjs
================
/** @type {import('next').NextConfig} */
const nextConfig = {
    images: {
      remotePatterns: [
        {
          protocol: 'http',
          hostname: 'localhost',
          port: '3000',
          pathname: '/images/**',
        },
      ],
    },
    async rewrites() {
      return [
        {
          source: '/images/:path*',
          destination: '/public/images/:path*',
        },
      ];
    },
  }
  
  export default nextConfig;

================
File: package.json
================
{
  "name": "multiverse-mixtape",
  "version": "0.1.0",
  "type": "module",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@fontsource/vt323": "^5.1.0",
    "formidable": "^3.5.2",
    "lucide-react": "^0.453.0",
    "next": "14.2.15",
    "react": "^18",
    "react-dom": "^18"
  },
  "devDependencies": {
    "eslint": "^8",
    "eslint-config-next": "14.2.15",
    "postcss": "^8",
    "tailwindcss": "^3.4.1"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.js`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.

================
File: src/app/_document.js
================
<link href="https://fonts.googleapis.com/css2?family=VT323&family=Press+Start+2P&family=Permanent+Marker&display=swap" rel="stylesheet" />

================
File: src/app/api/songs/[id]/route.js
================
import { readSongsFile, writeSongsFile } from '../../../../utils/fileOperations';
import { NextResponse } from 'next/server';

export async function PUT(request, { params }) {
  const { id } = params;
  const updatedSong = await request.json();
  const songs = await readSongsFile();
  const index = songs.songs.findIndex(song => song.id === id);
  
  if (index !== -1) {
    songs.songs[index] = { ...songs.songs[index], ...updatedSong };
    await writeSongsFile(songs);
    return NextResponse.json({ message: 'Song updated successfully' });
  } else {
    return NextResponse.json({ message: 'Song not found' }, { status: 404 });
  }
}

================
File: src/app/api/songs/route.js
================
import { readSongsFile, writeSongsFile } from "../../../utils/fileOperations";
import { NextResponse } from "next/server";

export async function GET() {
  const songs = await readSongsFile();
  return NextResponse.json(songs);
}

export async function POST(request) {
  const newSong = await request.json();
  const songs = await readSongsFile();
  songs.songs.push(newSong);
  await writeSongsFile(songs);
  return NextResponse.json({ message: "Song added successfully" });
}

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;
/* app/globals.css */
@import '@fontsource/vt323';

:root {
  --primary-color: #ff6b6b;
  --secondary-color: #4ecdc4;
  --background-color: #ffd700;
  --text-color: #333;
  --link-color: #1e3799;
  --link-hover-color: #0c2461;
}

.container {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
}

.header {
  background-color: var(--primary-color);
  padding: 20px;
  text-align: center;
  border-bottom: 4px solid #ff8c00;
  position: relative;
}

.logo {
  position: absolute;
  top: 20px;
  left: 20px;
  width: 50px;
  height: 50px;
  background-color: #ffffff;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
  color: var(--primary-color);
}

.header h1 {
  font-size: 3em;
  margin-bottom: 10px;
  color: #ffffff;
  text-shadow: 3px 3px #ff8c00;
}

.nav {
  margin-top: 20px;
}

.nav a {
  color: #ffffff;
  text-decoration: none;
  margin: 0 10px;
  font-weight: bold;
  padding: 5px 10px;
  border-radius: 5px;
  transition: background-color 0.3s ease;
  font-size: 1.2em;
}

.nav a:hover,
.nav a:focus {
  background-color: var(--secondary-color);
  outline: 2px solid #ffffff;
}

body {
  font-family: "VT323", "Courier New", monospace;
  background-color: var(--background-color);
  color: var(--text-color);
  line-height: 1.6;
  margin: 0;
  padding: 0;
  font-size: 18px;
}

@media (prefers-reduced-motion: reduce) {
  * {
    transition: none !important;
  }
}

@media (max-width: 768px) {
  body {
    font-size: 16px;
  }
}

================
File: src/app/layout.js
================
import localFont from "next/font/local";
import "./globals.css";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata = {
  title: "Multiverse Mixtape",
  description: "New City Pop",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <header className="header">
          <div className="logo">CPT</div>
          <h1>City Pop Threads</h1>
          <p>Music, Fashion, and Nostalgia</p>
          <nav className="nav">
            <a href="#about">About</a>
            <a href="#artists">Artists</a>
            <a href="#playlist">Playlist</a>
            <a href="#shop">Shop</a>
          </nav>
        </header>
        {children}
      </body>
    </html>
  );
}

================
File: src/app/multiversemixtape/page.js
================
"use client";
import { useState, useEffect } from "react";
import SongList from "../../components/SongList";
import AddSongModal from '../../components/AddSongModal';
import EditModal from "../../components/EditModal";
import styles from "../page.module.css";

export default function MultiverseMixtape() {
  const [songs, setSongs] = useState([]);
  const [editingSong, setEditingSong] = useState(null);
  const [isAddingSong, setIsAddingSong] = useState(false);

  useEffect(() => {
    const fetchSongs = async () => {
      try {
        const response = await fetch('/api/songs');
        const data = await response.json();
        console.log('Fetched songs data:', data);
        setSongs(data.songs);
      } catch (error) {
        console.error('Error fetching songs:', error);
      }
    };

    fetchSongs();
  }, []);

  const addSong = async (newSong) => {
    const response = await fetch('/api/songs', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(newSong),
    });
    if (response.ok) {
      fetchSongs();
      setIsAddingSong(false);
    }
  };

  const updateSong = async (updatedSong) => {
    const response = await fetch(`/api/songs/${updatedSong.id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(updatedSong),
    });
    if (response.ok) {
      fetchSongs();
      setEditingSong(null);
    }
  };

  return (
    <div className={styles.container}>
      <h1 className={styles.title}>Music Browser</h1>
      <button onClick={() => setIsAddingSong(true)}>Add New Song</button>
      <SongList songs={songs} onEdit={setEditingSong} />
      {isAddingSong && (
        <AddSongModal
          onSave={addSong}
          onClose={() => setIsAddingSong(false)}
        />
      )}
      {editingSong && (
        <EditModal
          song={editingSong}
          onSave={updateSong}
          onClose={() => setEditingSong(null)}
        />
      )}
    </div>
  );
}

================
File: src/app/page.js
================
// app/page.js
"use client";

import styles from "./page.module.css";

export default function Home() {
  return (
    <div>
      <main className={styles.container}>
        <section className={styles.content} id="about">
          <h2>About City Pop</h2>
          <p>
            City Pop is a genre of Japanese popular music that emerged in the
            late 1970s and peaked in the 1980s. It&apos;s characterized by its
            fusion of soft rock, R&B, funk, and boogie elements, often evoking
            images of urban life and luxury.
          </p>
          <p>
            At City Pop Threads, we celebrate this iconic era through both music
            and fashion. Our clothing line is inspired by the smooth sounds and
            neon-lit cityscapes of 1980s Japan.
          </p>
        </section>

        <section className={styles.content} id="artists">
          <h2>Notable Artists</h2>
          <ul className={styles.artistList}>
            <li>Tatsuro Yamashita</li>
            <li>Mariya Takeuchi</li>
            <li>Taeko Ohnuki</li>
            <li>Anri</li>
            <li>Miki Matsubara</li>
          </ul>
        </section>

        <section className={styles.content} id="playlist">
          <h2>Must-Listen Tracks</h2>
          <ol>
            <li>&quot;Plastic Love&quot; by Mariya Takeuchi</li>
            <li>&quot;Ride on Time&quot; by Tatsuro Yamashita</li>
            <li>&quot;Sweetest Music&quot; by Taeko Ohnuki</li>
            <li>&quot;Remember Summer Days&quot; by Anri</li>
            <li>&quot;Stay With Me&quot; by Miki Matsubara</li>
          </ol>
        </section>

        <section className={styles.content} id="shop">
          <h2>City Pop Threads Shop</h2>
          <p>
            Bring the City Pop vibe to your wardrobe! Our shop features clothing
            inspired by the iconic sounds and style of 1980s Japanese city pop.
            From graphic tees featuring album art to jackets reminiscent of
            neon-lit Tokyo nights, we&apos;ve got everything for the City Pop
            enthusiast.
          </p>
          <p>
            <a href="#">Visit our shop</a> to explore our latest collection and
            find your perfect retro look!
          </p>
        </section>
      </main>

      <footer className={styles.footer}>
        <p>
          &copy; 2024 City Pop Threads. Music and Fashion Inspired by Japanese
          City Pop.
        </p>
      </footer>
    </div>
  );
}

================
File: src/app/page.module.css
================
/* app/page.module.css */
.container {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
}

.header {
  background-color: var(--primary-color);
  padding: 20px;
  text-align: center;
  border-bottom: 4px solid #ff8c00;
  position: relative;
}

.logo {
  position: absolute;
  top: 20px;
  left: 20px;
  width: 50px;
  height: 50px;
  background-color: #ffffff;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
  color: var(--primary-color);
}

.header h1 {
  font-size: 3em;
  margin-bottom: 10px;
  color: #ffffff;
  text-shadow: 3px 3px #ff8c00;
}

.nav {
  margin-top: 20px;
}

.nav a {
  color: #ffffff;
  text-decoration: none;
  margin: 0 10px;
  font-weight: bold;
  padding: 5px 10px;
  border-radius: 5px;
  transition: background-color 0.3s ease;
  font-size: 1.2em;
}

.nav a:hover,
.nav a:focus {
  background-color: var(--secondary-color);
  outline: 2px solid #ffffff;
}

/* different */

.content {
  background-color: #ffffff;
  padding: 20px;
  margin-top: 20px;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  border: 2px solid #ff8c00;
}

.artistList {
  list-style-type: none;
  padding: 0;
}

.artistList li {
  margin-bottom: 10px;
  padding: 10px;
  background-color: var(--secondary-color);
  border-radius: 5px;
  color: #ffffff;
  font-size: 1.2em;
}

.footer {
  text-align: center;
  margin-top: 20px;
  padding: 10px;
  background-color: var(--primary-color);
  color: #ffffff;
  border-top: 4px solid #ff8c00;
}

.content a {
  color: var(--link-color);
  text-decoration: underline;
  transition: color 0.3s ease;
}

.content a:hover,
.content a:focus {
  color: var(--link-hover-color);
  outline: 2px solid var(--link-hover-color);
}

.content h2 {
  color: #ff4500;
  font-size: 2em;
  border-bottom: 2px dashed #ff8c00;
  padding-bottom: 5px;
}

@media (max-width: 768px) {
  .container {
    padding: 10px;
  }
  .header h1 {
    font-size: 2.5em;
  }
}

================
File: src/components/AddSongModal.js
================
import React, { useState } from "react";
import styles from "../styles/Modal.module.css";

const AddSongModal = ({ onSave, onClose }) => {
  const [newSong, setNewSong] = useState({
    title: "",
    artist: "",
    year: "",
    style: "",
    story: "",
    country: "",
    imageUrl: "",
    mp3Url: "",
    videoUrl: "",
    screenshotUrl: "",
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setNewSong({ ...newSong, [name]: value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave(newSong);
  };

  return (
    <div className={styles.modalBackdrop}>
      <div className={styles.modalContent}>
        <h2>Add New Song</h2>
        <form onSubmit={handleSubmit}>
          <label>
            Title:
            <input
              type="text"
              name="title"
              value={newSong.title}
              onChange={handleChange}
              required
            />
          </label>
          <label>
            Artist:
            <input
              type="text"
              name="artist"
              value={newSong.artist}
              onChange={handleChange}
              required
            />
          </label>
          <label>
            Year:
            <input
              type="text"
              name="year"
              value={newSong.year}
              onChange={handleChange}
            />
          </label>
          <label>
            Style:
            <input
              type="text"
              name="style"
              value={newSong.style}
              onChange={handleChange}
            />
          </label>
          <label>
            Story:
            <textarea
              name="story"
              value={newSong.story}
              onChange={handleChange}
            />
          </label>
          <label>
            Country:
            <input
              type="text"
              name="country"
              value={newSong.country}
              onChange={handleChange}
            />
          </label>
          <label>
            Image URL:
            <input
              type="url"
              name="imageUrl"
              value={newSong.imageUrl}
              onChange={handleChange}
            />
          </label>
          <label>
            MP3 URL:
            <input
              type="url"
              name="mp3Url"
              value={newSong.mp3Url}
              onChange={handleChange}
            />
          </label>
          <label>
            Video URL:
            <input
              type="url"
              name="videoUrl"
              value={newSong.videoUrl}
              onChange={handleChange}
            />
          </label>
          <label>
            Screenshot URL:
            <input
              type="url"
              name="screenshotUrl"
              value={newSong.screenshotUrl}
              onChange={handleChange}
            />
          </label>
          <div className={styles.buttonGroup}>
            <button type="submit">Add Song</button>
            <button type="button" onClick={onClose}>
              Cancel
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AddSongModal;

================
File: src/components/EditModal.js
================
import React, { useState } from "react";
import styles from "../styles/Modal.module.css";

const EditModal = ({ song, onSave, onClose }) => {
  const [editedSong, setEditedSong] = useState(song);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setEditedSong({ ...editedSong, [name]: value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave(editedSong);
  };

  return (
    <div className={styles.modalBackdrop}>
      <div className={styles.modalContent}>
        <h2>Edit Song</h2>
        <form onSubmit={handleSubmit}>
          <input type="hidden" name="id" value={editedSong.id} />
          <label>
            Title:
            <input
              type="text"
              name="title"
              value={editedSong.title}
              onChange={handleChange}
            />
          </label>
          <label>
            Artist:
            <input
              type="text"
              name="artist"
              value={editedSong.artist}
              onChange={handleChange}
            />
          </label>
          <label>
            Year:
            <input
              type="text"
              name="year"
              value={editedSong.year}
              onChange={handleChange}
            />
          </label>
          <label>
            Style:
            <input
              type="text"
              name="style"
              value={editedSong.style}
              onChange={handleChange}
            />
          </label>
          {/* Add more fields as needed */}
          <div className={styles.buttonGroup}>
            <button type="submit">Save</button>
            <button type="button" onClick={onClose}>
              Cancel
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default EditModal;

================
File: src/components/SongCard.js
================
import Image from 'next/image';
import { useState } from 'react';
import styles from '../styles/SongCard.module.css';

const SongCard = ({ song, onEdit }) => {
  const [imageError, setImageError] = useState(false);

  return (
    <div className={styles.container}>
      <div className={styles.imageContainer}>
        {!imageError ? (
          <Image
            src={song.imageUrl}
            alt={song.title}
            layout="fill"
            objectFit="cover"
            onError={() => setImageError(true)}
          />
        ) : (
          <div className={styles.fallbackImage}>Image not found</div>
        )}
      </div>
      <div className={styles.bottomContent}>
        <div className={styles.musicInfo}>
          <h1>{song.title}</h1>
          <p>Artist: {song.artist}</p>
          <p>Year: {song.year}</p>
        </div>
        <button onClick={() => onEdit(song)}>Edit</button>
      </div>
    </div>
  );
};

export default SongCard;

================
File: src/components/SongList.js
================
import React from "react";
import SongCard from "./SongCard";
import styles from "../styles/SongList.module.css";

const SongList = ({ songs, onEdit }) => {
  return (
    <div className={styles.songList}>
      {songs.map((song) => (
        <SongCard key={song.title} song={song} onEdit={() => onEdit(song)} />
      ))}
    </div>
  );
};

export default SongList;

================
File: src/data/songs.json
================
{
  "songs": [
    {
      "id": "1",
      "title": "Midnight Reflectionsss",
      "artist": "Sakan Miyuki",
      "year": "1981",
      "style": "City Pop, Jazz Fusion, Japanese",
      "story": "A nostalgic journey through late-night Tokyo, blending jazz and pop elements.",
      "country": "Japan",
      "imageUrl": "/images/beautifuldays.jpg",
      "mp3Url": "https://example.com/audio/midnight-reflections.mp3",
      "videoUrl": "https://example.com/videos/midnight-reflections.mp4",
      "screenshotUrl": "https://example.com/screenshots/midnight-reflections.jpg",
      "lyrics_structure": [
        {
          "No.": 1,
          "type": "intro",
          "content": "[Instrumental Beat: Soft drums with electric piano]"
        },
        {
          "No.": 2,
          "type": "verse",
          "content": "夜の街を歩くたび\n心の中に響いている\nあの日の光、もう戻らない\nあなたの笑顔、まだここにある"
        },
        {
          "No.": 3,
          "type": "chorus",
          "content": "Remember the Midnight Days\n二度と戻らないの\n星の光、遠い記憶\nあなたを連れていった"
        }
      ]
    },
    {
      "id": "2",
      "title": "Neon Dreams",
      "artist": "Synthwave Collective",
      "year": "2019",
      "style": "Synthwave, Electronic",
      "story": "An homage to 80s electronic music, capturing the essence of retro-futurism.",
      "country": "United States",
      "imageUrl": "/images/beautifuldays.jpg",
      "mp3Url": "https://example.com/audio/neon-dreams.mp3",
      "videoUrl": "https://example.com/videos/neon-dreams.mp4",
      "screenshotUrl": "https://example.com/screenshots/neon-dreams.jpg",
      "lyrics_structure": [
        {
          "No.": 1,
          "type": "intro",
          "content": "[Synth arpeggio with pulsing bass]"
        },
        {
          "No.": 2,
          "type": "verse",
          "content": "Neon lights flicker in the rain\nDigital dreams, we're not the same\nCybernetic heart, electric soul\nVirtual love takes its toll"
        },
        {
          "No.": 3,
          "type": "chorus",
          "content": "In my neon dreams\nNothing's as it seems\nPixelated love, binary code\nIn this digital world, we call home"
        }
      ]
    },
    {
      "id": "3",
      "title": "Samba de Verão",
      "artist": "João Gilberto",
      "year": "1964",
      "style": "Bossa Nova, Brazilian Jazz",
      "story": "A classic bossa nova tune celebrating the joy of Brazilian summers.",
      "country": "Brazil",
      "imageUrl": "/images/beautifuldays.jpg",
      "mp3Url": "https://example.com/audio/samba-de-verao.mp3",
      "videoUrl": "https://example.com/videos/samba-de-verao.mp4",
      "screenshotUrl": "https://example.com/screenshots/samba-de-verao.jpg",
      "lyrics_structure": [
        {
          "No.": 1,
          "type": "intro",
          "content": "[Gentle guitar strumming with soft percussion]"
        },
        {
          "No.": 2,
          "type": "verse",
          "content": "Samba de verão\nJá cantei pra você\nMas esse ano\nMeu cantar se fez mais triste"
        },
        {
          "No.": 3,
          "type": "chorus",
          "content": "Porque passou\nE a gente não viu\nO amor que a gente queria\nO amor que a gente queria"
        }
      ]
    },
    {
      "id": "4",
      "title": "Digital Sunset",
      "artist": "Vapor Wave",
      "year": "2022",
      "style": "Vaporwave, Ambient",
      "story": "An exploration of digital nostalgia and the aesthetics of early internet culture.",
      "country": "United Kingdom",
      "imageUrl": "/images/beautifuldays.jpg",
      "mp3Url": "https://example.com/audio/digital-sunset.mp3",
      "videoUrl": "https://example.com/videos/digital-sunset.mp4",
      "screenshotUrl": "https://example.com/screenshots/digital-sunset.jpg",
      "lyrics_structure": [
        {
          "No.": 1,
          "type": "intro",
          "content": "[Slowed down 80s pop sample with reverb]"
        },
        {
          "No.": 2,
          "type": "verse",
          "content": "Pixelated memories fade\nIn the glow of a CRT shade\nWindows 95, a digital dream\nNothing is quite as it seems"
        },
        {
          "No.": 3,
          "type": "chorus",
          "content": "Digital sunset, fading away\nNostalgia for a bygone day\nVaporwave aesthetics, mall music dreams\nEchoes of the past in lo-fi streams"
        }
      ]
    },
    {
      "id": "5",
      "title": "Sakura Nights",
      "artist": "Tokyo Drift",
      "year": "2020",
      "style": "J-Pop, Electronic",
      "story": "A modern take on Japanese pop, blending traditional elements with electronic beats.",
      "country": "Japan",
      "imageUrl": "/images/beautifuldays.jpg",
      "mp3Url": "https://example.com/audio/sakura-nights.mp3",
      "videoUrl": "https://example.com/videos/sakura-nights.mp4",
      "screenshotUrl": "https://example.com/screenshots/sakura-nights.jpg",
      "lyrics_structure": [
        {
          "No.": 1,
          "type": "intro",
          "content": "[Electronic beat with traditional Japanese flute]"
        },
        {
          "No.": 2,
          "type": "verse",
          "content": "桜の花びらが舞う夜に\n君と歩いた街角\nネオンサインが輝いて\n私たちを包み込む"
        },
        {
          "No.": 3,
          "type": "chorus",
          "content": "Sakura Nights, 心躍る\n東京の夜に溶け込んで\nSakura Nights, 君と二人\n終わらない夢を見てる"
        }
      ]
    }
  ]
}

================
File: src/styles/Modal.module.css
================
.modalBackdrop {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }
  
  .modalContent {
    background-color: white;
    padding: 2rem;
    border-radius: 8px;
    width: 90%;
    max-width: 500px;
    max-height: 90vh;
    overflow-y: auto;
  }
  
  .modalContent h2 {
    margin-top: 0;
    margin-bottom: 1rem;
  }
  
  .modalContent form {
    display: flex;
    flex-direction: column;
  }
  
  .modalContent label {
    margin-bottom: 1rem;
    display: flex;
    flex-direction: column;
  }
  
  .modalContent input,
  .modalContent textarea {
    width: 100%;
    padding: 0.5rem;
    margin-top: 0.25rem;
    border: 1px solid #ccc;
    border-radius: 4px;
  }
  
  .modalContent textarea {
    min-height: 100px;
    resize: vertical;
  }
  
  .buttonGroup {
    display: flex;
    justify-content: flex-end;
    margin-top: 1rem;
  }
  
  .buttonGroup button {
    margin-left: 0.5rem;
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  
  .buttonGroup button[type="submit"] {
    background-color: #0070f3;
    color: white;
  }
  
  .buttonGroup button[type="button"] {
    background-color: #f0f0f0;
    color: #333;
  }

================
File: src/styles/SongCard.module.css
================
.container {
  background-color: #ffffff;
  border-radius: 12px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  overflow: hidden;
  transition: transform 0.3s ease;
}

.container:hover {
  transform: translateY(-5px);
}

.imageContainer {
  width: 100%;
  height: 200px;
  object-fit: cover;
}

.bottomContent {
  padding: 1rem;
}

.musicInfo {
  margin-bottom: 1rem;
}

.details h1 {
  font-size: 1.5rem;
  margin: 0 0 0.5rem 0;
  color: #333;
}

.details p {
  font-size: 1rem;
  margin: 0 0 0.25rem 0;
  color: #666;
}

.editButton {
  background-color: #0070f3;
  color: white;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.editButton:hover {
  background-color: #0051a2;
}

.fallbackImage {
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: #f0f0f0;
  color: #666;
  font-style: italic;
}

================
File: src/styles/SongList.module.css
================
.songList {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 2rem;
  padding: 2rem;
}

@media (max-width: 768px) {
  .songList {
    grid-template-columns: 1fr;
  }
}

================
File: src/utils/fileOperations.js
================
import fs from "fs/promises";
import path from "path";
import songsData from "../data/songs.json";

const songsFilePath = path.join(process.cwd(), "src", "data", "songs.json");

export async function readSongsFile() {
  try {
    // For development, we'll return the imported data directly
    return songsData;

    // For production, you might want to read from the file system:
    // const data = await fs.readFile(songsFilePath, 'utf8');
    // return JSON.parse(data);
  } catch (error) {
    console.error("Error reading songs file:", error);
    return { songs: [] };
  }
}

export async function writeSongsFile(songs) {
  try {
    await fs.writeFile(songsFilePath, JSON.stringify(songs, null, 2));
  } catch (error) {
    console.error("Error writing songs file:", error);
  }
}

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
  },
  plugins: [],
};
