This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-06T13:50:40.580Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.eslintrc.json
.gitignore
jsconfig.json
LICENSE
next.config.mjs
package.json
postcss.config.mjs
public/robots.txt
public/sitemap.xml
README.md
src/app/_document.js
src/app/api/checkout/create-session/route.js
src/app/api/checkout/route.js
src/app/api/checkout/session/route.js
src/app/api/printify/products/[id]/route.js
src/app/api/printify/products/route.js
src/app/api/printify/shipping/route.js
src/app/api/songs/[id]/route.js
src/app/api/songs/route.js
src/app/cart/page.js
src/app/globals.css
src/app/layout.js
src/app/multiversemixtape/page.js
src/app/page.js
src/app/page.module.css
src/app/shop/[id]/page.js
src/app/shop/page.js
src/app/success/page.js
src/components/AddSongModal.js
src/components/Cart.js
src/components/EditModal.js
src/components/nav.js
src/components/ShippingForm.js
src/components/SongCard.js
src/components/SongList.js
src/context/CartContext.js
src/data/songs.json
src/lib/checkout.js
src/styles/Modal.module.css
src/styles/SongCard.module.css
src/styles/SongList.module.css
src/utils/fileOperations.js
tailwind.config.js

================================================================
Repository Files
================================================================

================
File: .eslintrc.json
================
{
  "extends": "next/core-web-vitals"
}

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

================
File: jsconfig.json
================
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}

================
File: LICENSE
================
MIT License

Copyright (c) 2024 Irving Jose Duran

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: next.config.mjs
================
/** @type {import('next').NextConfig} */
const nextConfig = {
  images: {
    remotePatterns: [
      {
        protocol: "https",
        hostname: "images-api.printify.com",
        pathname: "/mockup/**",
      },
      {
        protocol: "https",
        hostname: "images.printify.com",
        pathname: "/mockup/**",
      },
      {
        protocol: "http",
        hostname: "localhost",
        port: "3000",
        pathname: "/images/**",
      },
    ],
  },
  async rewrites() {
    return [
      {
        source: "/images/:path*",
        destination: "/public/images/:path*",
      },
    ];
  },
};

export default nextConfig;

================
File: package.json
================
{
  "name": "multiverse-mixtape",
  "version": "0.1.0",
  "type": "module",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@fontsource/vt323": "^5.1.0",
    "@stripe/stripe-js": "^5.6.0",
    "formidable": "^3.5.2",
    "lucide-react": "^0.453.0",
    "next": "14.2.15",
    "react": "^18",
    "react-dom": "^18",
    "stripe": "^17.6.0"
  },
  "devDependencies": {
    "eslint": "^8",
    "eslint-config-next": "14.2.15",
    "postcss": "^8",
    "tailwindcss": "^3.4.1"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: public/robots.txt
================
User-agent: *
Allow: /
Disallow: /api/
Sitemap: https://multiversemixtape.com/sitemap.xml

================
File: public/sitemap.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <url>
    <loc>https://multiversemixtape.com</loc>
    <lastmod>2024-02-05</lastmod>
    <changefreq>daily</changefreq>
    <priority>1.0</priority>
  </url>
  <url>
    <loc>https://multiversemixtape.com/shop</loc>
    <lastmod>2024-02-05</lastmod>
    <changefreq>daily</changefreq>
    <priority>0.8</priority>
  </url>
  <url>
    <loc>https://multiversemixtape.com/multiversemixtape</loc>
    <lastmod>2024-02-05</lastmod>
    <changefreq>daily</changefreq>
    <priority>0.8</priority>
  </url>
</urlset>

================
File: README.md
================
This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.js`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.

================
File: src/app/_document.js
================
<link href="https://fonts.googleapis.com/css2?family=VT323&family=Press+Start+2P&family=Permanent+Marker&display=swap" rel="stylesheet" />

================
File: src/app/api/checkout/create-session/route.js
================
// src/app/api/checkout/create-session/route.js
import { NextResponse } from "next/server";
import Stripe from "stripe";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

export async function POST(request) {
  try {
    const { items, shippingInfo } = await request.json();

    // Create line items for Stripe
    const lineItems = items.map((item) => ({
      price_data: {
        currency: "usd",
        product_data: {
          name: item.title,
          images: [item.image],
        },
        unit_amount: item.price * 100, // Convert to cents
      },
      quantity: item.quantity,
    }));

    // Format shipping address for Stripe
    const shippingAddress = {
      line1: shippingInfo.address,
      line2: shippingInfo.apartment || "",
      city: shippingInfo.city,
      state: shippingInfo.state,
      postal_code: shippingInfo.zipCode,
      country: shippingInfo.country,
    };

    // Create Stripe checkout session
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ["card"],
      line_items: lineItems,
      mode: "payment",
      success_url: `${process.env.NEXT_PUBLIC_BASE_URL}/success?session_id={CHECKOUT_SESSION_ID}`,
      cancel_url: `${process.env.NEXT_PUBLIC_BASE_URL}/cart`,
      shipping_address_collection: {
        // Lock down allowed countries
        allowed_countries: ["US"], // Modify this array based on your shipping capabilities
      },
      // Pre-fill customer details
      customer_email: shippingInfo.email,
      shipping_options: [
        {
          shipping_rate_data: {
            type: "fixed_amount",
            fixed_amount: {
              amount: 795, // $7.95 in cents
              currency: "usd",
            },
            display_name: "Standard Shipping",
            delivery_estimate: {
              minimum: {
                unit: "business_day",
                value: 5,
              },
              maximum: {
                unit: "business_day",
                value: 7,
              },
            },
          },
        },
      ],
      shipping_details: {
        name: `${shippingInfo.firstName} ${shippingInfo.lastName}`,
        phone: shippingInfo.phone,
        address: shippingAddress,
      },
      // Prevent shipping address modification
      allow_shipping_address_changes: false,
      phone_number_collection: {
        enabled: true,
      },
      custom_fields: [
        {
          key: "original_shipping_address",
          label: { type: "custom", custom: "Original Shipping Address" },
          type: "text",
          text: {
            maximum_length: 500,
          },
        },
      ],
      metadata: {
        // Store original shipping details in metadata for verification
        original_address: JSON.stringify(shippingAddress),
        customer_name: `${shippingInfo.firstName} ${shippingInfo.lastName}`,
        customer_phone: shippingInfo.phone,
      },
    });

    return NextResponse.json({ sessionId: session.id });
  } catch (error) {
    console.error("Error creating checkout session:", error);
    return NextResponse.json(
      { error: "Error creating checkout session" },
      { status: 500 }
    );
  }
}

================
File: src/app/api/checkout/route.js
================
// src/app/api/checkout/route.js
import { NextResponse } from "next/server";
import Stripe from "stripe";
import { headers } from "next/headers";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

export async function POST(request) {
  try {
    const { items, shipping, address } = await request.json();

    // Get the host from headers
    const headersList = headers();
    const host = headersList.get("host");
    const protocol = process.env.NODE_ENV === "production" ? "https" : "http";
    const baseUrl = `${protocol}://${host}`;

    // Validate shipping rate
    if (!shipping?.rate) {
      throw new Error("Shipping rate is required");
    }

    // Create line items for Stripe with variant details
    const lineItems = items.map((item) => {
      // Create base product data
      const productData = {
        name: item.title,
        images: [item.image],
        metadata: {
          variantId: item.variantId,
          ...(item.options || {}),
        },
      };

      // Add variant details to product name if they exist
      if (item.options && Object.keys(item.options).length > 0) {
        const variantDetails = Object.entries(item.options)
          .map(([key, value]) => `${key}: ${value}`)
          .join(" | ");

        productData.name = `${item.title} (${variantDetails})`;
      }

      return {
        price_data: {
          currency: "usd",
          product_data: productData,
          unit_amount: item.price,
        },
        quantity: item.quantity,
      };
    });

    // Convert shipping rate to cents and ensure it's a valid integer
    const shippingAmount = Math.round(Number(shipping.rate));

    if (isNaN(shippingAmount)) {
      throw new Error("Invalid shipping rate");
    }

    // Create checkout session
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ["card"],
      line_items: lineItems,
      mode: "payment",
      success_url: `${baseUrl}/success?session_id={CHECKOUT_SESSION_ID}`,
      cancel_url: `${baseUrl}/cart`,
      shipping_address_collection: {
        allowed_countries: ["US"],
      },
      shipping_options: [
        {
          shipping_rate_data: {
            type: "fixed_amount",
            fixed_amount: {
              amount: shippingAmount,
              currency: "usd",
            },
            display_name: shipping.name || "Standard Shipping",
            delivery_estimate: {
              minimum: {
                unit: "business_day",
                value: 5,
              },
              maximum: {
                unit: "business_day",
                value: 7,
              },
            },
          },
        },
      ],
      customer_email: address.email,
      billing_address_collection: "required",
    });

    return NextResponse.json({ sessionId: session.id });
  } catch (error) {
    console.error("Checkout error:", error);
    return NextResponse.json(
      { error: error.message || "Error creating checkout session" },
      { status: 500 }
    );
  }
}

================
File: src/app/api/checkout/session/route.js
================
// src/app/api/checkout/session/route.js
import { NextResponse } from "next/server";
import Stripe from "stripe";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

export async function GET(request) {
  const searchParams = request.nextUrl.searchParams;
  const sessionId = searchParams.get("session_id");

  if (!sessionId) {
    return NextResponse.json(
      { error: "Missing session_id parameter" },
      { status: 400 }
    );
  }

  try {
    // Retrieve the checkout session
    const session = await stripe.checkout.sessions.retrieve(sessionId, {
      expand: ["line_items", "customer", "payment_intent"],
    });

    // Format the response data
    const orderData = {
      customer: {
        email: session.customer_details.email,
        name: session.customer_details.name,
      },
      orderAmount: session.amount_total,
      orderDate: new Date(session.created * 1000).toLocaleDateString(),
      paymentStatus: session.payment_status,
      items: session.line_items.data.map((item) => ({
        name: item.description,
        quantity: item.quantity,
        price: item.amount_total / 100,
      })),
      orderNumber: session.payment_intent.id,
    };

    return NextResponse.json(orderData);
  } catch (error) {
    console.error("Error retrieving session:", error);
    return NextResponse.json(
      { error: "Error retrieving session details" },
      { status: 500 }
    );
  }
}

================
File: src/app/api/printify/products/[id]/route.js
================
import { NextResponse } from "next/server";

export async function GET(request, { params }) {
  const { id } = params;

  try {
    const response = await fetch(
      `https://api.printify.com/v1/shops/${process.env.PRINTIFY_SHOP_ID}/products/${id}.json`,
      {
        headers: {
          Authorization: `Bearer ${process.env.PRINTIFY_API_KEY}`,
        },
      }
    );

    if (!response.ok) {
      throw new Error("Failed to fetch product");
    }

    const fullProduct = await response.json();

    // Filter to only enabled variants and clean up unnecessary fields
    const enabledVariants = fullProduct.variants
      .filter((variant) => variant.is_enabled)
      .map((variant) => ({
        id: variant.id,
        sku: variant.sku,
        price: variant.price,
        title: variant.title,
        grams: variant.grams,
        is_enabled: variant.is_enabled,
        is_default: variant.is_default,
        is_available: variant.is_available,
        options: variant.options,
        quantity: variant.quantity,
      }));

    // Collect all option IDs used in enabled variants
    const usedOptionIds = new Set();
    enabledVariants.forEach((variant) => {
      variant.options.forEach((optionId) => {
        usedOptionIds.add(optionId);
      });
    });

    // Filter and clean the options array
    const filteredOptions = fullProduct.options.map((option) => ({
      name: option.name,
      type: option.type,
      values: option.values
        .filter((value) => usedOptionIds.has(value.id))
        .map((value) => ({
          id: value.id,
          title: value.title,
          ...(option.type === "color" && { colors: value.colors }),
        })),
    }));

    // Create cleaned product object with only necessary fields
    const cleanedProduct = {
      id: fullProduct.id,
      title: fullProduct.title,
      description: fullProduct.description,
      images: fullProduct.images.map((image) => ({
        src: image.src,
        variant_ids: image.variant_ids,
        position: image.position,
      })),
      options: filteredOptions,
      variants: enabledVariants,
      external: fullProduct.external,
      visible: fullProduct.visible,
      blueprint_id: fullProduct.blueprint_id,
    };

    return NextResponse.json(cleanedProduct);
  } catch (error) {
    console.error("Error fetching product:", error);
    return NextResponse.json(
      { error: "Failed to fetch product" },
      { status: 500 }
    );
  }
}

================
File: src/app/api/printify/products/route.js
================
import { NextResponse } from "next/server";

const PRINTIFY_API_KEY = process.env.PRINTIFY_API_KEY;
const SHOP_ID = process.env.PRINTIFY_SHOP_ID;

export async function GET() {
  try {
    const response = await fetch(
      `https://api.printify.com/v1/shops/${SHOP_ID}/products.json`,
      {
        headers: {
          Authorization: `Bearer ${PRINTIFY_API_KEY}`,
          "Content-Type": "application/json",
        },
      }
    );

    if (!response.ok) {
      throw new Error(`Printify API error: ${response.statusText}`);
    }

    const data = await response.json();

    // Clean and filter products
    const cleanedProducts = data.data.map((product) => {
      // Get enabled variants and clean them
      const enabledVariants = product.variants
        .filter((variant) => variant.is_enabled)
        .map((variant) => ({
          id: variant.id,
          sku: variant.sku,
          price: variant.price,
          title: variant.title,
          grams: variant.grams,
          is_enabled: variant.is_enabled,
          is_default: variant.is_default,
          is_available: variant.is_available,
          options: variant.options,
          quantity: variant.quantity,
        }));

      // Collect used option IDs from enabled variants
      const usedOptionIds = new Set();
      enabledVariants.forEach((variant) => {
        variant.options.forEach((optionId) => {
          usedOptionIds.add(optionId);
        });
      });

      // Filter and clean options
      const filteredOptions = product.options.map((option) => ({
        name: option.name,
        type: option.type,
        values: option.values
          .filter((value) => usedOptionIds.has(value.id))
          .map((value) => ({
            id: value.id,
            title: value.title,
            ...(option.type === "color" && { colors: value.colors }),
          })),
      }));

      // Return cleaned product
      return {
        id: product.id,
        title: product.title,
        description: product.description,
        images: product.images.map((image) => ({
          src: image.src,
          variant_ids: image.variant_ids,
          position: image.position,
        })),
        options: filteredOptions,
        variants: enabledVariants,
        external: product.external,
        visible: product.visible,
        blueprint_id: product.blueprint_id,
      };
    });

    // Filter out products with no enabled variants
    const productsWithEnabledVariants = cleanedProducts.filter(
      (product) => product.variants.length > 0
    );

    return NextResponse.json(productsWithEnabledVariants);
  } catch (error) {
    console.error("Error fetching products from Printify:", error);
    return NextResponse.json(
      { error: "Failed to fetch products" },
      { status: 500 }
    );
  }
}

================
File: src/app/api/printify/shipping/route.js
================
// src/app/api/printify/shipping/route.js
import { NextResponse } from "next/server";

export async function POST(request) {
  try {
    const { items, address } = await request.json();

    // Log the incoming request
    console.log("Received request:", { items, address });

    const requestBody = {
      line_items: items, // Keep the line items as is - they're already formatted correctly
      address_to: {
        first_name: address.first_name,
        last_name: address.last_name,
        email: address.email,
        phone: address.phone,
        country: address.country,
        region: address.region || "",
        address1: address.address1,
        address2: address.address2 || "",
        city: address.city,
        zip: address.zip,
      },
    };

    console.log("Sending to Printify:", JSON.stringify(requestBody, null, 2));

    const response = await fetch(
      `https://api.printify.com/v1/shops/${process.env.PRINTIFY_SHOP_ID}/orders/shipping.json`,
      {
        method: "POST",
        headers: {
          Authorization: `Bearer ${process.env.PRINTIFY_API_KEY}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify(requestBody),
      }
    );

    const responseData = await response.json();

    if (!response.ok) {
      console.error("Printify shipping calculation error:", responseData);
      throw new Error(responseData.message || "Failed to calculate shipping");
    }

    console.log("Printify shipping response:", responseData);
    return NextResponse.json(responseData);
  } catch (error) {
    console.error("Shipping calculation error:", error);
    return NextResponse.json(
      { error: error.message || "Failed to calculate shipping" },
      { status: 500 }
    );
  }
}

================
File: src/app/api/songs/[id]/route.js
================
import { readSongsFile, writeSongsFile } from '../../../../utils/fileOperations';
import { NextResponse } from 'next/server';

export async function PUT(request, { params }) {
  const { id } = params;
  const updatedSong = await request.json();
  const songs = await readSongsFile();
  const index = songs.songs.findIndex(song => song.id === id);
  
  if (index !== -1) {
    songs.songs[index] = { ...songs.songs[index], ...updatedSong };
    await writeSongsFile(songs);
    return NextResponse.json({ message: 'Song updated successfully' });
  } else {
    return NextResponse.json({ message: 'Song not found' }, { status: 404 });
  }
}

================
File: src/app/api/songs/route.js
================
import { readSongsFile, writeSongsFile } from "../../../utils/fileOperations";
import { NextResponse } from "next/server";

export async function GET() {
  const songs = await readSongsFile();
  return NextResponse.json(songs);
}

export async function POST(request) {
  const newSong = await request.json();
  const songs = await readSongsFile();
  songs.songs.push(newSong);
  await writeSongsFile(songs);
  return NextResponse.json({ message: "Song added successfully" });
}

================
File: src/app/cart/page.js
================
// src/app/cart/page.js
"use client";

import { useState, useEffect } from "react";
import Image from "next/image";
import Link from "next/link";
import { Trash2, Plus, Minus, ShoppingBag } from "lucide-react";
import { handleCheckout } from "@/lib/checkout";
import ShippingForm from "@/components/ShippingForm";

export default function Cart() {
  const [cartItems, setCartItems] = useState([]);
  const [isProcessing, setIsProcessing] = useState(false);
  const [error, setError] = useState(null);
  const [showShippingForm, setShowShippingForm] = useState(false);

  // Load cart items from localStorage on component mount
  useEffect(() => {
    const savedCart = localStorage.getItem("cart");
    if (savedCart) {
      setCartItems(JSON.parse(savedCart));
    }
  }, []);

  // Save cart items to localStorage whenever they change
  useEffect(() => {
    localStorage.setItem("cart", JSON.stringify(cartItems));
  }, [cartItems]);

  const updateQuantity = (itemId, newQuantity) => {
    if (newQuantity < 1) return;

    setCartItems((prevItems) =>
      prevItems.map((item) =>
        item.id === itemId ? { ...item, quantity: newQuantity } : item
      )
    );
  };

  const removeItem = (itemId) => {
    setCartItems((prevItems) => prevItems.filter((item) => item.id !== itemId));
  };

  const calculateSubtotal = () => {
    return cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);
  };

  const handleProceedToCheckout = () => {
    setShowShippingForm(true);
  };

  const handleShippingSubmit = async (shippingInfo) => {
    try {
      setIsProcessing(true);
      setError(null);
      await handleCheckout(cartItems, shippingInfo);
    } catch (err) {
      setError(err.message);
      setIsProcessing(false);
    }
  };

  if (!cartItems.length || cartItems.length === 0) {
    return (
      <div className="min-h-screen flex flex-col items-center justify-center p-4">
        <ShoppingBag className="w-16 h-16 text-gray-400 mb-4" />
        <h2 className="text-2xl font-bold text-gray-800 mb-2">
          Your cart is empty
        </h2>
        <p className="text-gray-600 mb-4">
          Looks like you haven't added any items yet.
        </p>
        <Link
          href="/shop"
          className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors"
        >
          Continue Shopping
        </Link>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-8">Shopping Cart</h1>

      <div className="grid grid-cols-1 lg:grid-cols-12 gap-8">
        {/* Cart Items Section */}
        <div className="lg:col-span-8">
          <div className="bg-white rounded-lg shadow">
            {cartItems.map((item) => (
              <div
                key={item.id}
                className="flex items-center p-6 border-b last:border-b-0"
              >
                {/* Product Image */}
                <div className="relative w-24 h-24 flex-shrink-0">
                  <Image
                    src={item.image}
                    alt={item.title}
                    layout="fill"
                    objectFit="cover"
                    className="rounded-md"
                  />
                </div>

                {/* Product Details */}
                <div className="ml-6 flex-grow">
                  <h3 className="text-lg font-medium text-gray-900">
                    {item.title}
                  </h3>
                  <p className="mt-1 text-sm text-gray-500">
                    ${item.price.toFixed(2)}
                  </p>
                </div>

                {/* Quantity Controls */}
                <div className="flex items-center ml-6">
                  <button
                    onClick={() => updateQuantity(item.id, item.quantity - 1)}
                    className="p-1 rounded-full hover:bg-gray-100"
                  >
                    <Minus className="w-4 h-4" />
                  </button>
                  <span className="mx-3 w-8 text-center">{item.quantity}</span>
                  <button
                    onClick={() => updateQuantity(item.id, item.quantity + 1)}
                    className="p-1 rounded-full hover:bg-gray-100"
                  >
                    <Plus className="w-4 h-4" />
                  </button>
                </div>

                {/* Remove Button */}
                <button
                  onClick={() => removeItem(item.id)}
                  className="ml-6 text-red-500 hover:text-red-600"
                >
                  <Trash2 className="w-5 h-5" />
                </button>
              </div>
            ))}
          </div>
        </div>

        {/* Order Summary Section */}
        <div className="lg:col-span-4">
          <div className="bg-gray-50 rounded-lg shadow p-6">
            <h2 className="text-lg font-medium text-gray-900 mb-4">
              Order Summary
            </h2>

            <div className="space-y-4">
              <div className="flex justify-between">
                <span className="text-gray-600">Subtotal</span>
                <span className="font-medium">
                  ${calculateSubtotal().toFixed(2)}
                </span>
              </div>

              <div className="flex justify-between">
                <span className="text-gray-600">Estimated Shipping</span>
                <span className="font-medium">$7.95</span>
              </div>

              <div className="border-t pt-4 flex justify-between">
                <span className="text-lg font-medium">Total</span>
                <span className="text-lg font-bold">
                  ${(calculateSubtotal() + 7.95).toFixed(2)}
                </span>
              </div>
            </div>

            {error && (
              <div className="mt-4 p-4 bg-red-50 text-red-600 rounded-md">
                {error}
              </div>
            )}

            {!showShippingForm ? (
              <button
                onClick={handleProceedToCheckout}
                disabled={isProcessing}
                className="w-full mt-6 bg-blue-600 text-white py-3 px-4 rounded-md hover:bg-blue-700 transition-colors disabled:bg-gray-400"
              >
                Proceed to Checkout
              </button>
            ) : (
              <div className="mt-6">
                <h3 className="text-lg font-medium text-gray-900 mb-4">
                  Shipping Information
                </h3>
                <ShippingForm
                  onSubmit={handleShippingSubmit}
                  isProcessing={isProcessing}
                />
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;
/* app/globals.css */
@import '@fontsource/vt323';

:root {
  --primary-color: #ff6b6b;
  --secondary-color: #4ecdc4;
  --background-color: #ffd700;
  --text-color: #333;
  --link-color: #1e3799;
  --link-hover-color: #0c2461;
}

.container {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
}

.header {
  background-color: var(--primary-color);
  padding: 20px;
  text-align: center;
  border-bottom: 4px solid #ff8c00;
  position: relative;
}

.logo {
  position: absolute;
  top: 20px;
  left: 20px;
  width: 50px;
  height: 50px;
  background-color: #ffffff;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
  color: var(--primary-color);
}

.header h1 {
  font-size: 3em;
  margin-bottom: 10px;
  color: #ffffff;
  text-shadow: 3px 3px #ff8c00;
}

.nav {
  margin-top: 20px;
}

.nav a {
  color: #ffffff;
  text-decoration: none;
  margin: 0 10px;
  font-weight: bold;
  padding: 5px 10px;
  border-radius: 5px;
  transition: background-color 0.3s ease;
  font-size: 1.2em;
}

.nav a:hover,
.nav a:focus {
  background-color: var(--secondary-color);
  outline: 2px solid #ffffff;
}

body {
  font-family: "VT323", "Courier New", monospace;
  background-color: var(--background-color);
  color: var(--text-color);
  line-height: 1.6;
  margin: 0;
  padding: 0;
  font-size: 18px;
}

@media (prefers-reduced-motion: reduce) {
  * {
    transition: none !important;
  }
}

@media (max-width: 768px) {
  body {
    font-size: 16px;
  }
}

================
File: src/app/layout.js
================
// src/app/layout.js
import localFont from "next/font/local";
import Script from "next/script";
import Header from "@/components/nav";
import { CartProvider } from "@/context/CartContext";
import Cart from "@/components/Cart";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata = {
  metadataBase: new URL("https://multiversemixtape.com"),
  title: {
    default: "MultiverseMixtape | New Wave Music Culture",
    template: "%s | MultiverseMixtape",
  },
  description:
    "Explore the MultiverseMixtape collection inspired by New Wave and City Pop culture. Shop our curated selection of music-inspired fashion and merchandise.",
  keywords: [
    "new wave",
    "city pop",
    "music fashion",
    "retro clothing",
    "japanese culture",
  ],
  openGraph: {
    title: "MultiverseMixtape",
    description: "New Wave Music Culture & Fashion",
    url: "https://multiversemixtape.com",
    siteName: "MultiverseMixtape",
    locale: "en_US",
    type: "website",
  },
  robots: {
    index: true,
    follow: true,
    googleBot: {
      index: true,
      follow: true,
      "max-video-preview": -1,
      "max-image-preview": "large",
      "max-snippet": -1,
    },
  },
  twitter: {
    card: "summary_large_image",
    title: "MultiverseMixtape",
    description: "New Wave Music Culture & Fashion",
  },
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <Script src="https://js.stripe.com/v3/" strategy="beforeInteractive" />
        <CartProvider>
          <Header />
          <Cart />
          {children}
        </CartProvider>
      </body>
    </html>
  );
}

================
File: src/app/multiversemixtape/page.js
================
"use client";
import { useState, useEffect } from "react";
import SongList from "../../components/SongList";
import AddSongModal from '../../components/AddSongModal';
import EditModal from "../../components/EditModal";
import styles from "../page.module.css";

export default function MultiverseMixtape() {
  const [songs, setSongs] = useState([]);
  const [editingSong, setEditingSong] = useState(null);
  const [isAddingSong, setIsAddingSong] = useState(false);

  useEffect(() => {
    const fetchSongs = async () => {
      try {
        const response = await fetch('/api/songs');
        const data = await response.json();
        console.log('Fetched songs data:', data);
        setSongs(data.songs);
      } catch (error) {
        console.error('Error fetching songs:', error);
      }
    };

    fetchSongs();
  }, []);

  const addSong = async (newSong) => {
    const response = await fetch('/api/songs', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(newSong),
    });
    if (response.ok) {
      fetchSongs();
      setIsAddingSong(false);
    }
  };

  const updateSong = async (updatedSong) => {
    const response = await fetch(`/api/songs/${updatedSong.id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(updatedSong),
    });
    if (response.ok) {
      fetchSongs();
      setEditingSong(null);
    }
  };

  return (
    <div className={styles.container}>
      <h1 className={styles.title}>Music Browser</h1>
      <button onClick={() => setIsAddingSong(true)}>Add New Song</button>
      <SongList songs={songs} onEdit={setEditingSong} />
      {isAddingSong && (
        <AddSongModal
          onSave={addSong}
          onClose={() => setIsAddingSong(false)}
        />
      )}
      {editingSong && (
        <EditModal
          song={editingSong}
          onSave={updateSong}
          onClose={() => setEditingSong(null)}
        />
      )}
    </div>
  );
}

================
File: src/app/page.js
================
"use client";
import { useEffect } from "react";
import { useRouter } from "next/navigation";
import styles from "./page.module.css";

export default function Home() {
  const router = useRouter();

  useEffect(() => {
    // Check if there's a hash in the URL
    if (window.location.hash) {
      const element = document.querySelector(window.location.hash);
      if (element) {
        element.scrollIntoView({ behavior: "smooth" });
      }
    }
  }, []);

  return (
    <div>
      <main className={styles.container}>
        {/* Multiverse Mixtape - Our Music */}
        <section className={styles.content} id="our-music">
          <h2>Our Music: The Multiverse Mixtape Sound</h2>
          <p>
            Inspired by the golden era of City Pop, we create music that pays
            homage to the past while embracing the future. Listen to our latest
            tracks on Spotify and experience the **Multiverse Mixtape** journey.
          </p>
          <div className={styles.spotifyEmbed}>
            <iframe
              // style="border-radius:12px"
              src="https://open.spotify.com/embed/artist/1hEy4eajOi9xpNBPAVGzuM?utm_source=generator"
              width="100%"
              height="152"
              frameBorder="0"
              allowfullscreen=""
              allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture"
              loading="lazy"
            ></iframe>
          </div>
        </section>

        {/* Introduction to Multiverse Mixtape */}
        <section className={styles.content} id="about">
          <h2>Multiverse Mixtape: A Love Letter to City Pop</h2>
          <p>
            Multiverse Mixtape started from a deep appreciation for **City
            Pop**, the genre that encapsulates the neon-soaked nostalgia of
            1980s Japan. What began as a passion for its smooth melodies and
            stylish aesthetic has evolved into a project that merges music,
            storytelling, and fashion.
          </p>
          <p>
            We blend classic City Pop influences with modern sounds, crafting a
            unique sonic experience that transcends time and space—just like a
            mixtape from a parallel universe.
          </p>
        </section>

        {/* Notable City Pop Artists */}
        <section className={styles.content} id="artists">
          <h2>City Pop Legends</h2>
          <ul className={styles.artistList}>
            <li>Tatsuro Yamashita</li>
            <li>Mariya Takeuchi</li>
            <li>Taeko Ohnuki</li>
            <li>Anri</li>
            <li>Miki Matsubara</li>
          </ul>
        </section>

        {/* Must-Listen City Pop Tracks */}
        <section className={styles.content} id="playlist">
          <h2>Essential City Pop Tracks</h2>
          <ol>
            <li>&quot;Plastic Love&quot; by Mariya Takeuchi</li>
            <li>&quot;Ride on Time&quot; by Tatsuro Yamashita</li>
            <li>&quot;Sweetest Music&quot; by Taeko Ohnuki</li>
            <li>&quot;Remember Summer Days&quot; by Anri</li>
            <li>&quot;Stay With Me&quot; by Miki Matsubara</li>
          </ol>
        </section>

        {/* City Pop Threads Shop */}
        <section className={styles.content} id="shop">
          <h2>City Pop Threads Shop</h2>
          <p>
            Elevate your wardrobe with fashion inspired by the sounds and
            aesthetics of 1980s City Pop. Our collection includes graphic tees,
            retro-inspired jackets, and accessories that capture the neon-lit
            nostalgia of Tokyo nights.
          </p>
          Shop Coming Soon
          {/* <p>
            <a href="#">Visit our shop</a> to explore our latest collection!
          </p> */}
        </section>
      </main>

      <footer className={styles.footer}>
        <p>
          &copy; 2024 Multiverse Mixtape. Music and Fashion Inspired by Japanese
          City Pop.
        </p>
      </footer>
    </div>
  );
}

================
File: src/app/page.module.css
================
/* app/page.module.css */
.container {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
}

.header {
  background-color: var(--primary-color);
  padding: 20px;
  text-align: center;
  border-bottom: 4px solid #ff8c00;
  position: relative;
}

.logo {
  position: absolute;
  top: 20px;
  left: 20px;
  width: 50px;
  height: 50px;
  background-color: #ffffff;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
  color: var(--primary-color);
}

.header h1 {
  font-size: 3em;
  margin-bottom: 10px;
  color: #ffffff;
  text-shadow: 3px 3px #ff8c00;
}

.nav {
  margin-top: 20px;
}

.nav a {
  color: #ffffff;
  text-decoration: none;
  margin: 0 10px;
  font-weight: bold;
  padding: 5px 10px;
  border-radius: 5px;
  transition: background-color 0.3s ease;
  font-size: 1.2em;
}

.nav a:hover,
.nav a:focus {
  background-color: var(--secondary-color);
  outline: 2px solid #ffffff;
}

/* different */

.content {
  background-color: #ffffff;
  padding: 20px;
  margin-top: 20px;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  border: 2px solid #ff8c00;
}

.artistList {
  list-style-type: none;
  padding: 0;
}

.artistList li {
  margin-bottom: 10px;
  padding: 10px;
  background-color: var(--secondary-color);
  border-radius: 5px;
  color: #ffffff;
  font-size: 1.2em;
}

.footer {
  text-align: center;
  margin-top: 20px;
  padding: 10px;
  background-color: var(--primary-color);
  color: #ffffff;
  border-top: 4px solid #ff8c00;
}

.content a {
  color: var(--link-color);
  text-decoration: underline;
  transition: color 0.3s ease;
}

.content a:hover,
.content a:focus {
  color: var(--link-hover-color);
  outline: 2px solid var(--link-hover-color);
}

.content h2 {
  color: #ff4500;
  font-size: 2em;
  border-bottom: 2px dashed #ff8c00;
  padding-bottom: 5px;
}

@media (max-width: 768px) {
  .container {
    padding: 10px;
  }
  .header h1 {
    font-size: 2.5em;
  }
}

================
File: src/app/shop/[id]/page.js
================
"use client";

import { useEffect, useState } from "react";
import Image from "next/image";
import { ArrowLeft } from "lucide-react";
import Link from "next/link";
import { useCart } from "@/context/CartContext";

export default function ProductPage({ params }) {
  const [product, setProduct] = useState(null);
  const [selectedVariant, setSelectedVariant] = useState(null);
  const [loading, setLoading] = useState(true);
  const [selectedOptions, setSelectedOptions] = useState({});
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const { addToCart } = useCart();

  useEffect(() => {
    async function fetchProduct() {
      try {
        const response = await fetch(`/api/printify/products/${params.id}`);
        if (!response.ok) throw new Error("Failed to fetch product");
        const data = await response.json();
        setProduct(data);

        // Initialize selected options with default values
        const initialOptions = {};
        data.options.forEach((option) => {
          initialOptions[option.name] = option.values[0]?.id;
        });
        setSelectedOptions(initialOptions);

        // Find the matching variant
        const defaultVariant = findMatchingVariant(
          data.variants,
          Object.values(initialOptions)
        );
        setSelectedVariant(defaultVariant || data.variants[0]);

        setLoading(false);
      } catch (error) {
        console.error("Error:", error);
        setLoading(false);
      }
    }
    fetchProduct();
  }, [params.id]);

  const findMatchingVariant = (variants, selectedOptionIds) => {
    return variants.find((variant) =>
      selectedOptionIds.every((optionId) =>
        variant.options.includes(parseInt(optionId))
      )
    );
  };

  const handleOptionChange = (optionName, optionId) => {
    const newOptions = { ...selectedOptions, [optionName]: optionId };
    setSelectedOptions(newOptions);

    // Find matching variant based on selected options
    if (product) {
      const matchingVariant = findMatchingVariant(
        product.variants,
        Object.values(newOptions)
      );
      setSelectedVariant(matchingVariant || product.variants[0]);
    }
  };

  const handleAddToCart = () => {
    if (product && selectedVariant) {
      const optionsData = {};
      product.options.forEach((option) => {
        const selectedValue = option.values.find(
          (v) => v.id === parseInt(selectedOptions[option.name])
        );
        optionsData[option.name] = selectedValue.title;
      });

      addToCart(product, selectedVariant.id, optionsData);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <p className="text-lg text-gray-600">Loading product...</p>
      </div>
    );
  }

  if (!product) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <p className="text-lg text-gray-600">Product not found</p>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto px-4 py-8">
      <Link
        href="/shop"
        className="inline-flex items-center text-blue-600 hover:text-blue-800 mb-8"
      >
        <ArrowLeft className="w-4 h-4 mr-2" />
        Back to Shop
      </Link>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        {/* Product Images Section */}
        <div className="space-y-4">
          <div className="relative h-96 md:h-[600px] rounded-lg overflow-hidden">
            {product.images?.[currentImageIndex]?.src && (
              <Image
                src={product.images[currentImageIndex].src}
                alt={product.title}
                layout="fill"
                objectFit="cover"
                className="w-full h-full object-center"
              />
            )}
          </div>

          <div className="grid grid-cols-4 gap-2">
            {product.images.slice(0, 8).map((image, index) => (
              <button
                key={index}
                className={`relative h-24 rounded-lg overflow-hidden border-2 ${
                  currentImageIndex === index
                    ? "border-blue-600"
                    : "border-transparent"
                }`}
                onClick={() => setCurrentImageIndex(index)}
              >
                <Image
                  src={image.src}
                  alt={`View ${index + 1}`}
                  layout="fill"
                  objectFit="cover"
                />
              </button>
            ))}
          </div>
        </div>

        {/* Product Details Section */}
        <div className="flex flex-col space-y-6">
          <h1 className="text-3xl font-bold">{product.title}</h1>

          <div className="text-xl font-medium text-gray-900">
            ${selectedVariant?.price / 100}
          </div>

          {/* Product Options */}
          <div className="space-y-4">
            {product.options.map((option) => (
              <div key={option.name}>
                <label className="block text-sm font-medium mb-2">
                  {option.name}
                </label>
                <select
                  className="w-full border-gray-300 rounded-md shadow-sm p-2"
                  value={selectedOptions[option.name]}
                  onChange={(e) =>
                    handleOptionChange(option.name, e.target.value)
                  }
                >
                  {option.values.map((value) => (
                    <option key={value.id} value={value.id}>
                      {value.title}
                    </option>
                  ))}
                </select>
              </div>
            ))}
          </div>

          {/* Add to Cart Button */}
          <button
            className="w-full bg-blue-600 text-white py-3 px-4 rounded-md hover:bg-blue-700 transition-colors duration-200"
            onClick={handleAddToCart}
            disabled={!selectedVariant?.is_available}
          >
            {selectedVariant?.is_available ? "Add to Cart" : "Out of Stock"}
          </button>

          {/* Product Description */}
          <div
            className="prose prose-sm mt-4"
            dangerouslySetInnerHTML={{ __html: product.description }}
          />

          {/* Product Details */}
          {selectedVariant && (
            <div className="border-t pt-4 mt-4 space-y-2">
              <h2 className="text-lg font-semibold">Product Details</h2>
              <p className="text-sm text-gray-600">
                <span className="font-medium">SKU:</span> {selectedVariant.sku}
              </p>
              <p className="text-sm text-gray-600">
                <span className="font-medium">Weight:</span>{" "}
                {selectedVariant.grams}g
              </p>
              {selectedVariant.quantity < 10 && (
                <p className="text-sm text-red-600 mt-2">
                  Only {selectedVariant.quantity} left in stock!
                </p>
              )}
              <div className="mt-4">
                <h3 className="text-sm font-medium mb-2">Selected Options:</h3>
                <ul className="text-sm text-gray-600 space-y-1">
                  {product.options.map((option) => {
                    const selectedValue = option.values.find(
                      (v) => v.id === parseInt(selectedOptions[option.name])
                    );
                    return (
                      <li key={option.name}>
                        <span className="font-medium">{option.name}:</span>{" "}
                        {selectedValue?.title}
                      </li>
                    );
                  })}
                </ul>
              </div>
              {/* Print on Demand Details */}
              <div className="mt-4">
                <h3 className="text-sm font-medium mb-2">
                  Print on Demand Details:
                </h3>
                <ul className="text-sm text-gray-600 space-y-1">
                  <li>
                    <span className="font-medium">Blueprint ID:</span>{" "}
                    {product.blueprint_id}
                  </li>
                  <li>
                    <span className="font-medium">Variant ID:</span>{" "}
                    {selectedVariant.id}
                  </li>
                </ul>
              </div>
              {/* Shipping & Production Info */}
              <div className="mt-4">
                <h3 className="text-sm font-medium mb-2">
                  Shipping & Production:
                </h3>
                <ul className="text-sm text-gray-600 list-disc pl-4 space-y-1">
                  <li>Production time: 2-5 business days</li>
                  <li>Shipping time varies by location</li>
                  <li>Printed and shipped from our trusted print providers</li>
                </ul>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

================
File: src/app/shop/page.js
================
"use client";

import { useEffect, useState } from "react";
import Image from "next/image";
import { useRouter } from "next/navigation";

export default function Shop() {
  const [products, setProducts] = useState([]);
  const router = useRouter();

  useEffect(() => {
    async function fetchProducts() {
      try {
        const response = await fetch("/api/printify/products");
        const data = await response.json();
        setProducts(data);
      } catch (error) {
        console.error("Error fetching products:", error);
      }
    }
    fetchProducts();
  }, []);

  return (
    <div className="max-w-7xl mx-auto px-4 py-8">
      <h1 className="text-4xl font-bold mb-4 text-center">
        Shop City Pop Threads
      </h1>
      <p className="text-lg text-gray-600 text-center mb-8">
        Discover our collection of City Pop-inspired fashion.
      </p>

      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
        {products.length > 0 ? (
          products.map((product) => (
            <div
              key={product.id}
              className="bg-white rounded-lg shadow-lg overflow-hidden transition-transform duration-300 hover:-translate-y-2 cursor-pointer"
              onClick={() => router.push(`/shop/${product.id}`)}
            >
              <div className="relative h-64 w-full">
                <Image
                  src={product.images[0].src}
                  alt={product.title}
                  layout="fill"
                  objectFit="cover"
                  className="w-full h-full object-center"
                />
              </div>
              <div className="p-6">
                <h3 className="text-xl font-semibold mb-2">{product.title}</h3>
                <p className="text-lg font-medium text-gray-700 mb-4">
                  ${product.variants[0].price / 100}
                </p>
                <div className="flex gap-2">
                  <button
                    className="flex-1 bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition-colors duration-200"
                    onClick={(e) => {
                      e.stopPropagation();
                      router.push(`/shop/${product.id}`);
                    }}
                  >
                    View Details
                  </button>
                </div>
              </div>
            </div>
          ))
        ) : (
          <p className="col-span-full text-center text-lg text-gray-600">
            Loading products...
          </p>
        )}
      </div>
    </div>
  );
}

================
File: src/app/success/page.js
================
// src/app/success/page.js
"use client";

import { useEffect, useState } from "react";
import { useSearchParams } from "next/navigation";
import { CheckCircle, Package, Mail } from "lucide-react";
import Link from "next/link";

export default function SuccessPage() {
  const [orderData, setOrderData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const searchParams = useSearchParams();
  const sessionId = searchParams.get("session_id");

  useEffect(() => {
    const fetchOrderDetails = async () => {
      try {
        const response = await fetch(
          `/api/checkout/session?session_id=${sessionId}`
        );
        if (!response.ok) throw new Error("Failed to fetch order details");
        const data = await response.json();
        setOrderData(data);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    if (sessionId) {
      fetchOrderDetails();
    }
  }, [sessionId]);

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-lg">Loading order details...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-red-600">Error: {error}</div>
      </div>
    );
  }

  if (!orderData) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-lg">No order data found</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-12 px-4">
      <div className="max-w-3xl mx-auto bg-white rounded-lg shadow-lg p-8">
        <div className="text-center mb-8">
          <CheckCircle className="w-16 h-16 text-green-500 mx-auto mb-4" />
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            Order Confirmed!
          </h1>
          <p className="text-gray-600">
            Thank you for your purchase. We&apos;ll send you shipping updates via
            email.
          </p>
        </div>

        <div className="border-t border-b border-gray-200 py-6 mb-8">
          <div className="flex justify-between mb-4">
            <span className="text-gray-600">Order number:</span>
            <span className="font-medium">{orderData.orderNumber}</span>
          </div>
          <div className="flex justify-between mb-4">
            <span className="text-gray-600">Order date:</span>
            <span className="font-medium">{orderData.orderDate}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-600">Total amount:</span>
            <span className="font-medium">
              ${(orderData.orderAmount / 100).toFixed(2)}
            </span>
          </div>
        </div>

        <div className="mb-8">
          <h2 className="text-xl font-semibold mb-4">Order Details</h2>
          <div className="space-y-4">
            {orderData.items.map((item, index) => (
              <div key={index} className="flex justify-between border-b pb-4">
                <div>
                  <p className="font-medium">{item.name}</p>
                  <p className="text-gray-600">Quantity: {item.quantity}</p>
                </div>
                <p className="font-medium">${item.price.toFixed(2)}</p>
              </div>
            ))}
          </div>
        </div>

        <div className="bg-gray-50 p-6 rounded-lg mb-8">
          <h2 className="text-xl font-semibold mb-4">What&apos;s Next?</h2>
          <div className="space-y-4">
            <div className="flex items-center">
              <Mail className="w-6 h-6 text-blue-500 mr-3" />
              <p>Confirmation email sent to {orderData.customer.email}</p>
            </div>
            <div className="flex items-center">
              <Package className="w-6 h-6 text-blue-500 mr-3" />
              <p>We&apos;ll notify you when your order ships</p>
            </div>
          </div>
        </div>

        <div className="text-center">
          <Link
            href="/shop"
            className="inline-block bg-blue-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors"
          >
            Continue Shopping
          </Link>
        </div>
      </div>
    </div>
  );
}

================
File: src/components/AddSongModal.js
================
import React, { useState } from "react";
import styles from "../styles/Modal.module.css";

const AddSongModal = ({ onSave, onClose }) => {
  const [newSong, setNewSong] = useState({
    title: "",
    artist: "",
    year: "",
    style: "",
    story: "",
    country: "",
    imageUrl: "",
    mp3Url: "",
    videoUrl: "",
    screenshotUrl: "",
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setNewSong({ ...newSong, [name]: value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave(newSong);
  };

  return (
    <div className={styles.modalBackdrop}>
      <div className={styles.modalContent}>
        <h2>Add New Song</h2>
        <form onSubmit={handleSubmit}>
          <label>
            Title:
            <input
              type="text"
              name="title"
              value={newSong.title}
              onChange={handleChange}
              required
            />
          </label>
          <label>
            Artist:
            <input
              type="text"
              name="artist"
              value={newSong.artist}
              onChange={handleChange}
              required
            />
          </label>
          <label>
            Year:
            <input
              type="text"
              name="year"
              value={newSong.year}
              onChange={handleChange}
            />
          </label>
          <label>
            Style:
            <input
              type="text"
              name="style"
              value={newSong.style}
              onChange={handleChange}
            />
          </label>
          <label>
            Story:
            <textarea
              name="story"
              value={newSong.story}
              onChange={handleChange}
            />
          </label>
          <label>
            Country:
            <input
              type="text"
              name="country"
              value={newSong.country}
              onChange={handleChange}
            />
          </label>
          <label>
            Image URL:
            <input
              type="url"
              name="imageUrl"
              value={newSong.imageUrl}
              onChange={handleChange}
            />
          </label>
          <label>
            MP3 URL:
            <input
              type="url"
              name="mp3Url"
              value={newSong.mp3Url}
              onChange={handleChange}
            />
          </label>
          <label>
            Video URL:
            <input
              type="url"
              name="videoUrl"
              value={newSong.videoUrl}
              onChange={handleChange}
            />
          </label>
          <label>
            Screenshot URL:
            <input
              type="url"
              name="screenshotUrl"
              value={newSong.screenshotUrl}
              onChange={handleChange}
            />
          </label>
          <div className={styles.buttonGroup}>
            <button type="submit">Add Song</button>
            <button type="button" onClick={onClose}>
              Cancel
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AddSongModal;

================
File: src/components/Cart.js
================
"use client";

import { useState } from "react";
import { ShoppingCart, X, Plus, Minus, ArrowLeft } from "lucide-react";
import { useCart } from "../context/CartContext";
import { loadStripe } from "@stripe/stripe-js";
import ShippingForm from "./ShippingForm";

// Initialize Stripe outside the component
const stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_KEY);

export default function Cart() {
  const [isOpen, setIsOpen] = useState(false);
  const [showShippingForm, setShowShippingForm] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [error, setError] = useState(null);

  const { items, total, removeFromCart, updateQuantity, getCartForPrintify } =
    useCart();

  const handleShippingSubmit = async (addressData) => {
    try {
      setIsProcessing(true);
      setError(null);

      // First get shipping rates
      console.log("Calculating shipping rates...");
      const shippingResponse = await fetch("/api/printify/shipping", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          items: getCartForPrintify(),
          address: addressData,
        }),
      });

      if (!shippingResponse.ok) {
        throw new Error("Failed to calculate shipping");
      }

      const shippingRates = await shippingResponse.json();
      console.log("Shipping rates:", shippingRates);

      // Format shipping data - make sure we have the rate
      const shipping = {
        rate: shippingRates.standard, // This matches the Printify response structure
        name: "Standard Shipping",
      };

      console.log("Formatted shipping data:", shipping);

      // Then create Stripe checkout session
      const response = await fetch("/api/checkout", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          items: items,
          shipping: shipping,
          address: addressData,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Failed to create checkout session");
      }

      const { sessionId } = await response.json();

      // Load Stripe and redirect to checkout
      const stripe = await stripePromise;
      if (!stripe) {
        throw new Error("Failed to load Stripe");
      }

      const result = await stripe.redirectToCheckout({ sessionId });

      if (result.error) {
        throw new Error(result.error.message);
      }
    } catch (error) {
      console.error("Checkout error:", error);
      setError(error.message);
    } finally {
      setIsProcessing(false);
    }
  };

  const handleProceedToCheckout = () => {
    setShowShippingForm(true);
  };

  const handleBackToCart = () => {
    setShowShippingForm(false);
    setError(null);
  };

  return (
    <div className="relative">
      {/* Cart Toggle Button */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="fixed top-4 right-4 z-50 bg-blue-600 text-white p-2 rounded-full shadow-lg hover:bg-blue-700 transition-colors"
      >
        <ShoppingCart className="w-6 h-6" />
        {items.length > 0 && (
          <span className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-6 h-6 flex items-center justify-center">
            {items.length}
          </span>
        )}
      </button>

      {/* Cart Sidebar */}
      <div
        className={`fixed top-0 right-0 h-full w-96 bg-white shadow-lg transform transition-transform duration-300 ease-in-out z-40 ${
          isOpen ? "translate-x-0" : "translate-x-full"
        }`}
      >
        <div className="p-4 h-full flex flex-col">
          {/* Cart Header */}
          <div className="flex justify-between items-center border-b pb-4">
            {showShippingForm ? (
              <div className="flex items-center">
                <button
                  onClick={handleBackToCart}
                  className="mr-2 text-gray-500 hover:text-gray-700"
                >
                  <ArrowLeft className="w-5 h-5" />
                </button>
                <h2 className="text-xl font-bold">Shipping Information</h2>
              </div>
            ) : (
              <h2 className="text-xl font-bold">Shopping Cart</h2>
            )}
            <button
              onClick={() => setIsOpen(false)}
              className="text-gray-500 hover:text-gray-700"
            >
              <X className="w-6 h-6" />
            </button>
          </div>

          {/* Cart Content */}
          <div className="flex-1 overflow-y-auto py-4">
            {showShippingForm ? (
              <>
                <ShippingForm
                  onSubmit={handleShippingSubmit}
                  onBack={handleBackToCart}
                  isProcessing={isProcessing}
                />
                {error && (
                  <div className="mt-4 p-4 bg-red-50 text-red-600 rounded-md">
                    {error}
                  </div>
                )}
              </>
            ) : items.length === 0 ? (
              <p className="text-center text-gray-500">Your cart is empty</p>
            ) : (
              <div className="space-y-4">
                {items.map((item) => (
                  <div
                    key={item.variantId}
                    className="flex items-center space-x-4 border-b pb-4"
                  >
                    {/* eslint-disable-next-line @next/next/no-img-element */}
                    <img
                      src={item.image}
                      alt={item.title}
                      className="w-20 h-20 object-cover rounded"
                    />
                    <div className="flex-1">
                      <h3 className="font-medium">{item.title}</h3>
                      <p className="text-gray-500">
                        ${(item.price / 100).toFixed(2)}
                      </p>
                      {/* Display selected options */}
                      {item.options &&
                        Object.entries(item.options).map(([key, value]) => (
                          <p key={key} className="text-sm text-gray-500">
                            {key}: {value}
                          </p>
                        ))}
                      <div className="flex items-center space-x-2 mt-2">
                        <button
                          onClick={() =>
                            updateQuantity(item.variantId, item.quantity - 1)
                          }
                          className="p-1 rounded-full hover:bg-gray-100"
                        >
                          <Minus className="w-4 h-4" />
                        </button>
                        <span>{item.quantity}</span>
                        <button
                          onClick={() =>
                            updateQuantity(item.variantId, item.quantity + 1)
                          }
                          className="p-1 rounded-full hover:bg-gray-100"
                        >
                          <Plus className="w-4 h-4" />
                        </button>
                      </div>
                    </div>
                    <button
                      onClick={() => removeFromCart(item.variantId)}
                      className="text-red-500 hover:text-red-700"
                    >
                      <X className="w-5 h-5" />
                    </button>
                  </div>
                ))}
              </div>
            )}
          </div>

          {/* Cart Footer */}
          {!showShippingForm && items.length > 0 && (
            <div className="border-t pt-4">
              <div className="flex justify-between items-center mb-4">
                <span className="font-bold">Total:</span>
                <span className="font-bold">${(total / 100).toFixed(2)}</span>
              </div>
              <button
                onClick={handleProceedToCheckout}
                disabled={items.length === 0}
                className="w-full bg-blue-600 text-white py-2 rounded-md hover:bg-blue-700 transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed"
              >
                Proceed to Checkout
              </button>
            </div>
          )}
        </div>
      </div>

      {/* Backdrop */}
      {isOpen && (
        <div
          className="fixed inset-0 bg-black bg-opacity-50 z-30"
          onClick={() => setIsOpen(false)}
        />
      )}
    </div>
  );
}

================
File: src/components/EditModal.js
================
import React, { useState } from "react";
import styles from "../styles/Modal.module.css";

const EditModal = ({ song, onSave, onClose }) => {
  const [editedSong, setEditedSong] = useState(song);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setEditedSong({ ...editedSong, [name]: value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave(editedSong);
  };

  return (
    <div className={styles.modalBackdrop}>
      <div className={styles.modalContent}>
        <h2>Edit Song</h2>
        <form onSubmit={handleSubmit}>
          <input type="hidden" name="id" value={editedSong.id} />
          <label>
            Title:
            <input
              type="text"
              name="title"
              value={editedSong.title}
              onChange={handleChange}
            />
          </label>
          <label>
            Artist:
            <input
              type="text"
              name="artist"
              value={editedSong.artist}
              onChange={handleChange}
            />
          </label>
          <label>
            Year:
            <input
              type="text"
              name="year"
              value={editedSong.year}
              onChange={handleChange}
            />
          </label>
          <label>
            Style:
            <input
              type="text"
              name="style"
              value={editedSong.style}
              onChange={handleChange}
            />
          </label>
          {/* Add more fields as needed */}
          <div className={styles.buttonGroup}>
            <button type="submit">Save</button>
            <button type="button" onClick={onClose}>
              Cancel
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default EditModal;

================
File: src/components/nav.js
================
"use client";
import { useState } from "react";
import { Menu } from "lucide-react";
import Link from "next/link";
import Image from "next/image";
import "../app/globals.css";

export default function Header() {
  const [menuOpen, setMenuOpen] = useState(false);
  return (
    <header className="header flex flex-col md:flex-row items-center justify-between p-4 bg-primary-color border-b-4 border-orange-600">
      <div className="flex items-center w-full md:w-auto justify-between">
        <Link href="/">
          <Image
            src="/images/logo.png"
            alt="MultiverseMixtape Logo"
            width={100}
            height={100}
            className="rounded-full"
          />
        </Link>
        <button className="md:hidden" onClick={() => setMenuOpen(!menuOpen)}>
          <Menu className="w-8 h-8 text-white" />
        </button>
      </div>
      <div className="text-center md:flex-1">
        <h1 className="text-3xl text-white font-bold mb-2 md:mb-0">
          The Multiverse Mixtape
        </h1>
        <p className="text-white">Music, Fashion, and Nostalgia</p>
      </div>
      <nav
        className={`nav md:flex ${
          menuOpen
            ? "flex flex-col absolute top-full left-0 w-full bg-pink-300"
            : "hidden"
        } md:relative md:w-auto md:flex-row md:gap-4`}
      >
        <Link
          href="/#about"
          className="block text-white py-2 px-4 hover:bg-secondary-color rounded"
        >
          About
        </Link>
        <Link
          href="/#artists"
          className="block text-white py-2 px-4 hover:bg-secondary-color rounded"
        >
          Artists
        </Link>
        <Link
          href="/#playlist"
          className="block text-white py-2 px-4 hover:bg-secondary-color rounded"
        >
          Playlist
        </Link>
      </nav>
    </header>
  );
}

================
File: src/components/ShippingForm.js
================
// src/components/ShippingForm.js
"use client";

import { useState } from "react";

const COUNTRIES = [
  { code: "US", name: "United States" },
  { code: "CA", name: "Canada" },
  { code: "GB", name: "United Kingdom" },
  // Add more countries as needed
];

export default function ShippingForm({ onSubmit, onBack, isProcessing }) {
  const [country, setCountry] = useState("US");
  const [error, setError] = useState("");

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!country) {
      setError("Please select a country");
      return;
    }
    onSubmit({ country });
  };

  return (
    <div className="p-4">
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Select your country
            <select
              value={country}
              onChange={(e) => setCountry(e.target.value)}
              className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2"
            >
              {COUNTRIES.map((country) => (
                <option key={country.code} value={country.code}>
                  {country.name}
                </option>
              ))}
            </select>
          </label>
          {error && <p className="mt-1 text-sm text-red-600">{error}</p>}
        </div>

        <div className="flex space-x-4">
          <button
            type="button"
            onClick={onBack}
            className="flex-1 px-4 py-2 bg-gray-100 text-gray-800 rounded-md hover:bg-gray-200 transition-colors"
          >
            Back to Cart
          </button>
          <button
            type="submit"
            disabled={isProcessing}
            className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors disabled:bg-gray-400"
          >
            {isProcessing ? "Processing..." : "Continue to Checkout"}
          </button>
        </div>
      </form>
    </div>
  );
}

================
File: src/components/SongCard.js
================
import React from 'react';
import Image from 'next/image';
import styles from '../styles/SongCard.module.css';

const SongCard = ({ song, onEdit }) => {
  return (
    <div className={styles.container}>
      <div className={styles.imageContainer}>
        <Image
          src={song.imageUrl}
          alt={song.title}
          layout="fill"
          objectFit="cover"
        />
      </div>
      <div className={styles.bottomContent}>
        <div className={styles.musicInfo}>
          <h1>{song.title}</h1>
          <p>Artist: {song.artist}</p>
          <p>Year: {song.year}</p>
        </div>
        <button className={styles.editButton} onClick={() => onEdit(song)}>
          Edit
        </button>
      </div>
    </div>
  );
};

export default SongCard;

================
File: src/components/SongList.js
================
import React from "react";
import SongCard from "./SongCard";
import styles from "../styles/SongList.module.css";

const SongList = ({ songs, onEdit }) => {
  return (
    <div className={styles.songList}>
      {songs.map((song) => (
        <SongCard key={song.id} song={song} onEdit={onEdit} />
      ))}
    </div>
  );
};

export default SongList;

================
File: src/context/CartContext.js
================
"use client";

import { createContext, useContext, useReducer, useEffect } from "react";

const CartContext = createContext();

const initialState = {
  items: [],
  total: 0,
};

function cartReducer(state, action) {
  switch (action.type) {
    case "ADD_TO_CART": {
      const existingItemIndex = state.items.findIndex(
        (item) => item.variantId === action.payload.variantId
      );

      let newItems;
      if (existingItemIndex > -1) {
        newItems = state.items.map((item, index) => {
          if (index === existingItemIndex) {
            return { ...item, quantity: item.quantity + 1 };
          }
          return item;
        });
      } else {
        newItems = [...state.items, { ...action.payload, quantity: 1 }];
      }

      return {
        ...state,
        items: newItems,
        total: calculateTotal(newItems),
      };
    }

    case "REMOVE_FROM_CART": {
      const newItems = state.items.filter(
        (item) => item.variantId !== action.payload
      );
      return {
        ...state,
        items: newItems,
        total: calculateTotal(newItems),
      };
    }

    case "UPDATE_QUANTITY": {
      const newItems = state.items
        .map((item) => {
          if (item.variantId === action.payload.variantId) {
            return { ...item, quantity: action.payload.quantity };
          }
          return item;
        })
        .filter((item) => item.quantity > 0); // Remove items with quantity 0

      return {
        ...state,
        items: newItems,
        total: calculateTotal(newItems),
      };
    }

    case "CLEAR_CART":
      return initialState;

    case "LOAD_CART":
      return {
        ...state,
        items: action.payload,
        total: calculateTotal(action.payload),
      };

    default:
      return state;
  }
}

function calculateTotal(items) {
  return items.reduce((sum, item) => sum + item.price * item.quantity, 0);
}

export function CartProvider({ children }) {
  const [state, dispatch] = useReducer(cartReducer, initialState);

  // Load cart from localStorage on mount
  useEffect(() => {
    try {
      const savedCart = localStorage.getItem("cart");
      if (savedCart) {
        const { items } = JSON.parse(savedCart);
        if (Array.isArray(items)) {
          dispatch({ type: "LOAD_CART", payload: items });
        }
      }
    } catch (error) {
      console.error("Error loading cart from localStorage:", error);
    }
  }, []);

  // Save cart to localStorage when it changes
  useEffect(() => {
    try {
      localStorage.setItem("cart", JSON.stringify(state));
    } catch (error) {
      console.error("Error saving cart to localStorage:", error);
    }
  }, [state]);

  const addToCart = (product, variantId, selectedOptions) => {
    try {
      const variant = product.variants.find((v) => v.id === variantId);
      if (!variant) {
        throw new Error("Variant not found");
      }

      dispatch({
        type: "ADD_TO_CART",
        payload: {
          id: product.id,
          title: product.title,
          variantId,
          price: variant.price,
          image: product.images[0]?.src,
          options: selectedOptions,
          variant: {
            id: variant.id,
            sku: variant.sku,
            price: variant.price,
            grams: variant.grams,
            is_enabled: variant.is_enabled,
            options: variant.options,
          },
          blueprint_id: product.blueprint_id,
          print_provider_id: 99, // This is needed for Printify
        },
      });
    } catch (error) {
      console.error("Error adding item to cart:", error);
    }
  };

  const removeFromCart = (variantId) => {
    dispatch({ type: "REMOVE_FROM_CART", payload: variantId });
  };

  const updateQuantity = (variantId, quantity) => {
    if (quantity < 0) return;
    dispatch({ type: "UPDATE_QUANTITY", payload: { variantId, quantity } });
  };

  const clearCart = () => {
    dispatch({ type: "CLEAR_CART" });
  };

  const getCartForPrintify = () => {
    return state.items.map((item) => {
      // If SKU is available, return SKU-based line item
      if (item.variant?.sku) {
        return {
          sku: item.variant.sku,
          quantity: item.quantity,
        };
      }

      // If print_provider_id and blueprint_id are available, return that format
      if (item.print_provider_id && item.blueprint_id) {
        return {
          print_provider_id: item.print_provider_id,
          blueprint_id: item.blueprint_id,
          variant_id: parseInt(item.variantId),
          quantity: item.quantity,
        };
      }

      // Default to product_id and variant_id format
      return {
        product_id: item.id,
        variant_id: parseInt(item.variantId),
        quantity: item.quantity,
      };
    });
  };

  return (
    <CartContext.Provider
      value={{
        items: state.items,
        total: state.total,
        addToCart,
        removeFromCart,
        updateQuantity,
        clearCart,
        getCartForPrintify,
      }}
    >
      {children}
    </CartContext.Provider>
  );
}

export function useCart() {
  const context = useContext(CartContext);
  if (!context) {
    throw new Error("useCart must be used within a CartProvider");
  }
  return context;
}

================
File: src/data/songs.json
================
{
  "songs": [
    {
      "id": "1",
      "title": "Midnight Reflectionsss",
      "artist": "Sakan Miyuki",
      "year": "1981",
      "style": "City Pop, Jazz Fusion, Japanese",
      "story": "A nostalgic journey through late-night Tokyo, blending jazz and pop elements.",
      "country": "Japan",
      "imageUrl": "/images/beautifuldays.jpg",
      "mp3Url": "https://example.com/audio/midnight-reflections.mp3",
      "videoUrl": "https://example.com/videos/midnight-reflections.mp4",
      "screenshotUrl": "https://example.com/screenshots/midnight-reflections.jpg",
      "lyrics_structure": [
        {
          "No.": 1,
          "type": "intro",
          "content": "[Instrumental Beat: Soft drums with electric piano]"
        },
        {
          "No.": 2,
          "type": "verse",
          "content": "夜の街を歩くたび\n心の中に響いている\nあの日の光、もう戻らない\nあなたの笑顔、まだここにある"
        },
        {
          "No.": 3,
          "type": "chorus",
          "content": "Remember the Midnight Days\n二度と戻らないの\n星の光、遠い記憶\nあなたを連れていった"
        }
      ]
    },
    {
      "id": "2",
      "title": "Neon Dreams",
      "artist": "Synthwave Collective",
      "year": "2019",
      "style": "Synthwave, Electronic",
      "story": "An homage to 80s electronic music, capturing the essence of retro-futurism.",
      "country": "United States",
      "imageUrl": "/images/beautifuldays.jpg",
      "mp3Url": "https://example.com/audio/neon-dreams.mp3",
      "videoUrl": "https://example.com/videos/neon-dreams.mp4",
      "screenshotUrl": "https://example.com/screenshots/neon-dreams.jpg",
      "lyrics_structure": [
        {
          "No.": 1,
          "type": "intro",
          "content": "[Synth arpeggio with pulsing bass]"
        },
        {
          "No.": 2,
          "type": "verse",
          "content": "Neon lights flicker in the rain\nDigital dreams, we're not the same\nCybernetic heart, electric soul\nVirtual love takes its toll"
        },
        {
          "No.": 3,
          "type": "chorus",
          "content": "In my neon dreams\nNothing's as it seems\nPixelated love, binary code\nIn this digital world, we call home"
        }
      ]
    },
    {
      "id": "3",
      "title": "Samba de Verão",
      "artist": "João Gilberto",
      "year": "1964",
      "style": "Bossa Nova, Brazilian Jazz",
      "story": "A classic bossa nova tune celebrating the joy of Brazilian summers.",
      "country": "Brazil",
      "imageUrl": "/images/beautifuldays.jpg",
      "mp3Url": "https://example.com/audio/samba-de-verao.mp3",
      "videoUrl": "https://example.com/videos/samba-de-verao.mp4",
      "screenshotUrl": "https://example.com/screenshots/samba-de-verao.jpg",
      "lyrics_structure": [
        {
          "No.": 1,
          "type": "intro",
          "content": "[Gentle guitar strumming with soft percussion]"
        },
        {
          "No.": 2,
          "type": "verse",
          "content": "Samba de verão\nJá cantei pra você\nMas esse ano\nMeu cantar se fez mais triste"
        },
        {
          "No.": 3,
          "type": "chorus",
          "content": "Porque passou\nE a gente não viu\nO amor que a gente queria\nO amor que a gente queria"
        }
      ]
    },
    {
      "id": "4",
      "title": "Digital Sunset",
      "artist": "Vapor Wave",
      "year": "2022",
      "style": "Vaporwave, Ambient",
      "story": "An exploration of digital nostalgia and the aesthetics of early internet culture.",
      "country": "United Kingdom",
      "imageUrl": "/images/beautifuldays.jpg",
      "mp3Url": "https://example.com/audio/digital-sunset.mp3",
      "videoUrl": "https://example.com/videos/digital-sunset.mp4",
      "screenshotUrl": "https://example.com/screenshots/digital-sunset.jpg",
      "lyrics_structure": [
        {
          "No.": 1,
          "type": "intro",
          "content": "[Slowed down 80s pop sample with reverb]"
        },
        {
          "No.": 2,
          "type": "verse",
          "content": "Pixelated memories fade\nIn the glow of a CRT shade\nWindows 95, a digital dream\nNothing is quite as it seems"
        },
        {
          "No.": 3,
          "type": "chorus",
          "content": "Digital sunset, fading away\nNostalgia for a bygone day\nVaporwave aesthetics, mall music dreams\nEchoes of the past in lo-fi streams"
        }
      ]
    },
    {
      "id": "5",
      "title": "Sakura Nights",
      "artist": "Tokyo Drift",
      "year": "2020",
      "style": "J-Pop, Electronic",
      "story": "A modern take on Japanese pop, blending traditional elements with electronic beats.",
      "country": "Japan",
      "imageUrl": "/images/beautifuldays.jpg",
      "mp3Url": "https://example.com/audio/sakura-nights.mp3",
      "videoUrl": "https://example.com/videos/sakura-nights.mp4",
      "screenshotUrl": "https://example.com/screenshots/sakura-nights.jpg",
      "lyrics_structure": [
        {
          "No.": 1,
          "type": "intro",
          "content": "[Electronic beat with traditional Japanese flute]"
        },
        {
          "No.": 2,
          "type": "verse",
          "content": "桜の花びらが舞う夜に\n君と歩いた街角\nネオンサインが輝いて\n私たちを包み込む"
        },
        {
          "No.": 3,
          "type": "chorus",
          "content": "Sakura Nights, 心躍る\n東京の夜に溶け込んで\nSakura Nights, 君と二人\n終わらない夢を見てる"
        }
      ]
    }
  ]
}

================
File: src/lib/checkout.js
================
// src/lib/checkout.js
import { loadStripe } from "@stripe/stripe-js";

const stripePromise = loadStripe(
  process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY
);

export async function handleCheckout(cartItems, shippingInfo) {
  try {
    const stripe = await stripePromise;

    // Create checkout session
    const response = await fetch("/api/checkout/create-session", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        items: cartItems,
        shippingInfo,
      }),
    });

    if (!response.ok) {
      throw new Error("Failed to create checkout session");
    }

    const { sessionId } = await response.json();

    // Redirect to Stripe Checkout
    const result = await stripe.redirectToCheckout({
      sessionId,
    });

    if (result.error) {
      throw new Error(result.error.message);
    }
  } catch (error) {
    console.error("Checkout error:", error);
    throw error;
  }
}

================
File: src/styles/Modal.module.css
================
.modalBackdrop {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }
  
  .modalContent {
    background-color: white;
    padding: 2rem;
    border-radius: 8px;
    width: 90%;
    max-width: 500px;
    max-height: 90vh;
    overflow-y: auto;
  }
  
  .modalContent h2 {
    margin-top: 0;
    margin-bottom: 1rem;
  }
  
  .modalContent form {
    display: flex;
    flex-direction: column;
  }
  
  .modalContent label {
    margin-bottom: 1rem;
    display: flex;
    flex-direction: column;
  }
  
  .modalContent input,
  .modalContent textarea {
    width: 100%;
    padding: 0.5rem;
    margin-top: 0.25rem;
    border: 1px solid #ccc;
    border-radius: 4px;
  }
  
  .modalContent textarea {
    min-height: 100px;
    resize: vertical;
  }
  
  .buttonGroup {
    display: flex;
    justify-content: flex-end;
    margin-top: 1rem;
  }
  
  .buttonGroup button {
    margin-left: 0.5rem;
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  
  .buttonGroup button[type="submit"] {
    background-color: #0070f3;
    color: white;
  }
  
  .buttonGroup button[type="button"] {
    background-color: #f0f0f0;
    color: #333;
  }

================
File: src/styles/SongCard.module.css
================
/* src/styles/SongCard.module.css */
.container {
  width: 300px;
  background-color: #ffffff;
  border-radius: 12px;
  overflow: hidden;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s ease;
  padding: 10px;
  
}

.container:hover {
  transform: translateY(-5px);
}

.imageContainer {
  width: 100%;
  height: 300px;
  position: relative;
}

.bottomContent {
  padding: 1rem;
  display: flex;
  justify-content: space-between;
}

.musicInfo {
  margin-bottom: 1rem;
}

.musicInfo h1 {
  font-size: 1.5rem;
  margin: 0 0 0.5rem 0;
  color: #333;
  font-weight: bold;
}

.musicInfo p {
  font-size: 1rem;
  margin: 0 0 0.25rem 0;
  color: #666;
}

.editButton {
  background-color: #0070f3;
  color: white;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s ease;
  font-size: 1rem;
  height: 40px;
}

.editButton:hover {
  background-color: #0051a2;
}

================
File: src/styles/SongList.module.css
================
/* src/styles/SongList.module.css */
.songList {
  display: grid;
  grid-template-columns: repeat(3, minmax(300px, 1fr));
  gap: 2rem;
  padding: 2rem;
}

@media (max-width: 768px) {
  .songList {
    grid-template-columns: 1fr;
  }
}

================
File: src/utils/fileOperations.js
================
import fs from "fs/promises";
import path from "path";
import songsData from "../data/songs.json";

const songsFilePath = path.join(process.cwd(), "src", "data", "songs.json");

export async function readSongsFile() {
  try {
    // For development, we'll return the imported data directly
    return songsData;

    // For production, you might want to read from the file system:
    // const data = await fs.readFile(songsFilePath, 'utf8');
    // return JSON.parse(data);
  } catch (error) {
    console.error("Error reading songs file:", error);
    return { songs: [] };
  }
}

export async function writeSongsFile(songs) {
  try {
    await fs.writeFile(songsFilePath, JSON.stringify(songs, null, 2));
  } catch (error) {
    console.error("Error writing songs file:", error);
  }
}

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
  },
  plugins: [],
};
